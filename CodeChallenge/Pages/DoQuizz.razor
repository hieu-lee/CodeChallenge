@page "/quizz"
@using CodeChallenge.Components;
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h1>Sport Quizz</h1>

@if (questions is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @for (int i = 0; i < questions.Length; i++)
        {
            var ques = questions[i];
        <li>
            <Question number="i+1" personalWork="@personalWork" question="@ques.question" answerA="@ques.answers[0]" answerB="@ques.answers[1]" answerC="@ques.answers[2]" answerD="@ques.answers[3]"></Question>
        </li>
            
        }
    </ul>
    <div class="button-holder">
        <button class="btn btn-primary" @onclick="ShowScore" style="margin: 0 auto;">Submit</button>
    </div>
    
}

@code {
    private bool submitted = false;
    private Question[] questions;
    private static Random rng = new Random();
    private Dictionary<int, string> personalWork = new();
    private Dictionary<int, string> solutionKey = new();

    protected override async Task OnInitializedAsync()
    {
        var message = await Http.GetFromJsonAsync<Message>("api.php?amount=5&category=21&difficulty=easy&type=multiple");
        questions = message.results;
        var i = 1;
        foreach (var ques in questions)
        {
            ques.answers = new() { ques.correct_answer, ques.incorrect_answers[0], ques.incorrect_answers[1], ques.incorrect_answers[2] };
            ques.answers = Shuffle(ques.answers);
            solutionKey[i] = ques.correct_answer;
            personalWork[i] = string.Empty;
            i++;
        }
    }

    private List<string> Shuffle(List<string> list)
    {
        int n = list.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            string value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
        return list;
    }

    public class Message
    {
        public int response_code { get; set; }
        public Question[] results { get; set; }
    }

    public class Question
    {
        public string category { get; set; }
        public string type { get; set; }
        public string difficulty { get; set; }
        public string question { get; set; }
        public string correct_answer { get; set; }
        public string[] incorrect_answers { get; set; }
        public List<string> answers;
    }

    private async void ShowScore()
    {
        if (!submitted)
        {
            var res = 0;
            var max = 0;
            foreach (var index in solutionKey.Keys)
            {
                max++;
                if (solutionKey[index] == personalWork[index])
                {
                    res++;
                }
            }
            submitted = true;
            await JsRuntime.InvokeAsync<object>("alert", $"You got {res}/{max} correct answers");
        }
    }
}
